[
  {
    "url": "https://api.github.com/repos/rspec/rspec/issues/61",
    "repository_url": "https://api.github.com/repos/rspec/rspec",
    "labels_url": "https://api.github.com/repos/rspec/rspec/issues/61/labels{/name}",
    "comments_url": "https://api.github.com/repos/rspec/rspec/issues/61/comments",
    "events_url": "https://api.github.com/repos/rspec/rspec/issues/61/events",
    "html_url": "https://github.com/rspec/rspec/issues/61",
    "id": 693118347,
    "node_id": "MDU6SXNzdWU2OTMxMTgzNDc=",
    "number": 61,
    "title": "RSpec 4.0 plan",
    "user": {
      "login": "pirj",
      "id": 6916,
      "node_id": "MDQ6VXNlcjY5MTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pirj",
      "html_url": "https://github.com/pirj",
      "followers_url": "https://api.github.com/users/pirj/followers",
      "following_url": "https://api.github.com/users/pirj/following{/other_user}",
      "gists_url": "https://api.github.com/users/pirj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pirj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pirj/subscriptions",
      "organizations_url": "https://api.github.com/users/pirj/orgs",
      "repos_url": "https://api.github.com/users/pirj/repos",
      "events_url": "https://api.github.com/users/pirj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pirj/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 863985845,
        "node_id": "MDU6TGFiZWw4NjM5ODU4NDU=",
        "url": "https://api.github.com/repos/rspec/rspec/labels/RSpec%204",
        "name": "RSpec 4",
        "color": "f9d861",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-09-04T12:31:58Z",
    "updated_at": "2020-09-26T10:53:21Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "It's been in the air and mostly in sparse @JonRowe's comments ([1](https://github.com/rspec/rspec/issues/25#issuecomment-451770525), [2](https://github.com/rspec/rspec-rails/pull/2381#issuecomment-686158523)). This is an attempt to gather the ideas and start the discussion.\r\n\r\n - [ ] Drop EOL Ruby versions\r\n - [ ] Move to monorepo\r\n - [ ] Remove deprecated features\r\n - [ ] Introduce new defaults\r\n - [ ] Extract rarely used features\r\n - [ ] New differ\r\n - [ ] Thread-safety\r\n - [ ] Concurrent runner\r\n - [ ] Extract common parts\r\n - [ ] Style guide\r\n\r\n\r\n### Ruby support\r\n\r\nEOL Ruby means we support 2.5+, since [2.4 is EOL in April 2020](https://www.ruby-lang.org/en/news/2020/04/05/support-of-ruby-2-4-has-ended/)\r\nHowever, according to [2020 RoR community survey](https://rails-hosting.com/2020/#ruby-rails-version-updates)\r\n![image](https://user-images.githubusercontent.com/6916/92234122-27f64480-eeba-11ea-8e0e-44b3dda51d79.png)\r\n\r\n70% use 2.5+\r\n81% use 2.4+\r\n89% use 2.3+\r\n\r\nDo 2.3 and 2.4 cause any trouble? I could only find this:\r\n```ruby\r\n        # 2.4 has improved BigDecimal formatting so we do not need\r\n        # to provide our own.\r\n        # https://github.com/ruby/bigdecimal/pull/42\r\n        classes.delete(BigDecimalInspector) if RUBY_VERSION &gt;= '2.4'\r\n```\r\n\r\nI can only think of RuboCop's `TargetRubyVersion` setting that has a minimum of 2.4. That means we won't be able to run `rubocop` on 2.3 CI build.\r\n\r\nMore on this in https://github.com/rspec/rspec/issues/25\r\n\r\n\r\n### Monorepo\r\n\r\nSolves problems:\r\n - simplifies local development of features spanning across repos\r\n - simplifies builds\r\n\r\nStruggles:\r\n - wrap up or manually transfer all hanging pull requests in Expectations and Mocks\r\n - now the CI limit of simultaneous jobs costrains our a bit tighter\r\n\r\nWe may try other CIs, e.g. Circle, Buildkite, GH Actions, builds.sr.ht\r\nIn my personal experience with `rubocop-rspec`, Circle's builds with the cache turned off are taking seconds, not minutes.\r\n\r\nWIP https://github.com/rspec/rspec/pull/48\r\n\r\n### Remove deprecated features/Introduce new defaults/Extract rarely used features\r\n\r\n - [ ] `shared_context_metadata_behavior`\r\n - [ ] monkey-patching mode\r\n - [ ] `should` syntax (with implicit receiver only, where `should` can be backed by `is_expected.to`. extract to a gem?)\r\n - [ ] `*_any_instance_of` (extract to a gem?)\r\n - [ ] implicit block syntax (not yet deprecated, there's a hanging pull request)\r\n\r\n#### Consider deprecating long-hanging/obscure features\r\n\r\n- [ ] DRb runner. I only know of Spork that was using it, but its 2.0.0-rc is years old now with no signs of life\r\n\r\n\r\n### New differ\r\n\r\nIt caught my eye when a colleague used a desktop git tool with such an amazing output:\r\n![image](https://user-images.githubusercontent.com/6916/92237378-f08a9680-eebf-11ea-8bee-4b5819aad22e.png)\r\n\r\n\r\n### Thread-safety\r\n\r\nThings like `RSpec.current_example`/`RSpec.world` are shared across threads and make it impossible to run multi-threaded.\r\n\r\n\r\n### Concurrent runner\r\n\r\nI'm not sure what is the status, but it seems that [some work has been done on this front](https://github.com/rspec/rspec-rails/issues/2104#issuecomment-658474900).\r\n\r\n\r\n### Factorize\r\n\r\nI can't find that discussion, but I remember there was an idea to extract commonly used code somewhere, and a concern expressed that `rspec-support` shouldn't become that bag-of-things-that-don't-fit-anywhere-else.\r\n\r\n- [ ] countable matcher into a module that can be used in matchers from Expectations, Mocks and third-party extensions.\r\n- [ ] spec helpers (`fail_with`)\r\n\r\n\r\n### Style guide\r\n\r\nhttps://github.com/rspec/rspec.github.io/issues/28",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/rspec/rspec/issues/48",
    "repository_url": "https://api.github.com/repos/rspec/rspec",
    "labels_url": "https://api.github.com/repos/rspec/rspec/issues/48/labels{/name}",
    "comments_url": "https://api.github.com/repos/rspec/rspec/issues/48/comments",
    "events_url": "https://api.github.com/repos/rspec/rspec/issues/48/events",
    "html_url": "https://github.com/rspec/rspec/pull/48",
    "id": 501922974,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzI0MTAwNjQ5",
    "number": 48,
    "title": "Merge rspec repos",
    "user": {
      "login": "p8",
      "id": 28561,
      "node_id": "MDQ6VXNlcjI4NTYx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/28561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/p8",
      "html_url": "https://github.com/p8",
      "followers_url": "https://api.github.com/users/p8/followers",
      "following_url": "https://api.github.com/users/p8/following{/other_user}",
      "gists_url": "https://api.github.com/users/p8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/p8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p8/subscriptions",
      "organizations_url": "https://api.github.com/users/p8/orgs",
      "repos_url": "https://api.github.com/users/p8/repos",
      "events_url": "https://api.github.com/users/p8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/p8/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 28,
    "created_at": "2019-10-03T08:25:53Z",
    "updated_at": "2020-08-02T01:51:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rspec/rspec/pulls/48",
      "html_url": "https://github.com/rspec/rspec/pull/48",
      "diff_url": "https://github.com/rspec/rspec/pull/48.diff",
      "patch_url": "https://github.com/rspec/rspec/pull/48.patch"
    },
    "body": "Proof of concept for merging the other repos into this repo while keeping all history (See: https://github.com/rspec/rspec-core/issues/2509).\r\nI had some success with the steps described here (https://thoughts.t37.net/merging-2-different-git-repositories-without-losing-your-history-de7a06bba804\r\n\r\n```\r\nmkdir rspec-mono\r\ncd rspec-mono\r\ngit clone git@github.com:rspec/rspec.git\r\ngit clone git@github.com:rspec/rspec-core.git\r\ngit clone git@github.com:rspec/rspec-expectations.git\r\ngit clone git@github.com:rspec/rspec-mocks.git\r\ncd rspec-core\r\nmkdir rspec-core\r\ngit mv -k * rspec-core\r\ngit rm .gitignore\r\ngit rm .document\r\ngit commit -m 'Moving repo into its own subdirectory'\r\ncd ..\r\ncd rspec-expectations\r\nmkdir rspec-expectations\r\ngit mv -k * rspec-expectations\r\ngit rm .gitignore\r\ngit rm .document\r\ngit rm .rspec\r\ngit rm .rubocop.yml\r\ngit rm .rubocop_rspec_base.yml\r\ngit rm .travis.yml\r\ngit rm .yardopts\r\ngit commit -m 'Moving repo into its own subdirectory'\r\ncd ..\r\ncd rspec-mocks\r\nmkdir rspec-mocks\r\ngit mv -k * rspec-mocks\r\ngit rm .gitignore\r\ngit rm .document\r\ngit rm .rspec\r\ngit rm .rubocop.yml\r\ngit rm .rubocop_rspec_base.yml\r\ngit rm .travis.yml\r\ngit rm .yardopts\r\ngit commit -m 'Moving repo into its own subdirectory'\r\ncd ..\r\ncd rspec\r\ngit remote add rspec-core ../rspec-core\r\ngit remote add rspec-expectations ../rspec-expectations\r\ngit remote add rspec-mocks ../rspec-mocks\r\ngit fetch rspec-core\r\ngit fetch rspec-expectations\r\ngit fetch rspec-mocks\r\ngit co -b merge-rspec-repos\r\ngit merge --allow-unrelated-histories rspec-core/master\r\ngit merge --allow-unrelated-histories rspec-expectations/master\r\ngit merge --allow-unrelated-histories rspec-mocks/master\r\ngit commit -m 'Import sub repos'\r\n\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/rspec/rspec/issues/25",
    "repository_url": "https://api.github.com/repos/rspec/rspec",
    "labels_url": "https://api.github.com/repos/rspec/rspec/issues/25/labels{/name}",
    "comments_url": "https://api.github.com/repos/rspec/rspec/issues/25/comments",
    "events_url": "https://api.github.com/repos/rspec/rspec/issues/25/events",
    "html_url": "https://github.com/rspec/rspec/issues/25",
    "id": 304247471,
    "node_id": "MDU6SXNzdWUzMDQyNDc0NzE=",
    "number": 25,
    "title": "RFC: change our Ruby version support policy for RSpec 4",
    "user": {
      "login": "myronmarston",
      "id": 49391,
      "node_id": "MDQ6VXNlcjQ5Mzkx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/49391?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myronmarston",
      "html_url": "https://github.com/myronmarston",
      "followers_url": "https://api.github.com/users/myronmarston/followers",
      "following_url": "https://api.github.com/users/myronmarston/following{/other_user}",
      "gists_url": "https://api.github.com/users/myronmarston/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myronmarston/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myronmarston/subscriptions",
      "organizations_url": "https://api.github.com/users/myronmarston/orgs",
      "repos_url": "https://api.github.com/users/myronmarston/repos",
      "events_url": "https://api.github.com/users/myronmarston/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myronmarston/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 863985675,
        "node_id": "MDU6TGFiZWw4NjM5ODU2NzU=",
        "url": "https://api.github.com/repos/rspec/rspec/labels/RFC",
        "name": "RFC",
        "color": "5ccace",
        "default": false,
        "description": ""
      },
      {
        "id": 863985845,
        "node_id": "MDU6TGFiZWw4NjM5ODU4NDU=",
        "url": "https://api.github.com/repos/rspec/rspec/labels/RSpec%204",
        "name": "RSpec 4",
        "color": "f9d861",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 24,
    "created_at": "2018-03-12T05:44:03Z",
    "updated_at": "2020-08-14T07:42:05Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "## TL;DR\r\n\r\nI propose that we change our Ruby version support policy for RSpec 4 so that dropping support for old ruby versions is no longer coupled to major version releases. Instead, I recommend we adopt a policy based around supporting old Ruby versions for N months after the Ruby core team has EOL'd\r\nit (for some reasonable value of N).\r\n\r\n## The Current State of Things\r\n\r\nWe currently support 10 versions of MRI:\r\n\r\n- 1.8.7\r\n- 1.9.2\r\n- 1.9.3\r\n- 2.0\r\n- 2.1\r\n- 2.2\r\n- 2.3\r\n- 2.4\r\n- 2.5\r\n- 2.6\r\n\r\nIn addition, we have been strictly interpreting SemVer to mean that the only time we can drop support for an old version of Ruby is when we do a major release. As a result, we drop support for old versions very, very rarely. In fact, in all my years of involvement with RSpec (dating back to 2010), I can only think of one version of Ruby we've ever dropped support for: we stopped supporting 1.8.6 when RSpec 3 was released.\r\n\r\nI think the amount of effort we expend supporting old versions vastly exceeds the utility to our users.\r\n\r\n## Why is this a problem?\r\n\r\nSupporting old Ruby versions has a very real maintenance cost:\r\n\r\n- Supporting old versions bloats our Travis build matrix, costing Travis more resources, and slowing down our feedback cycle from our CI builds.\r\n- Our CI build does not consistently pass on old Ruby versions for reasons outside our control. For example, our CI builds get intermittent segfaults on MRI 1.9.2 and REE. Dealing with those failures (kicking the build, etc) has a very real maintenance cost.\r\n- Continuing to support old Ruby versions has prevented us from upgrading our dependencies. For example, we are still on Cucumber 1.x, even though Cucumber 3.1 is out. Cucumber does not support ruby 1.8.7 starting with Cucumber 2, so we haven't been able to upgrade. Staying on old versions of dependencies causes us to accumulate excess tech debt.\r\n- In my experience, there's often extra work to get my PRs green against the old Ruby versions.  For example, I often accidentally use the newer hash syntax, which 1.8.7 cannot parse.  After the CI build finishes, I see the failure, fix it, and force push to address the issue. This creates extra work for what should be simple changes.\r\n- Supporting old Ruby versions limits our ability to take advantage of new Ruby features.\r\n\r\n## Regarding SemVer\r\n\r\nThe [SemVer spec](https://semver.org/) does not specifically document when a library is allowed to drop support for an old version of a language. I'd argue that it's a grey area that we're allowed to decide on for our project.  And even if it did explicitly document it, it's up to us to decide if we want to strictly follow it.  IMO, the important thing about SemVer is that your project documents the semantics of your versioning and sticks to it--not necessarily that you follow the SemVer spec. IMO, if we realize that strict adherence to the SemVer spec was inhibiting our ability to serve our users due to extra work it requires, it would be wise and appropriate to choose not to follow the spec anymore, and decide on our own semantic that we think better serves our users.\r\n\r\nThat said, I don't believe the SemVer spec requires that we maintain support for old versions of the language until the next major release.\r\n\r\n## Coupling Version Drops to Major Releases is a problem\r\n\r\nWhile we strive to follow SemVer, bumping RSpec's major version is not purely a technical decision. It's also a marketing decision. The Ruby community has certain expectations around a major release of a project like RSpec containing major new features. In addition, there are lots of published materials (such as [my own book](https://pragprog.com/book/rspec3/effective-testing-with-rspec-3)) that reference RSpec's version number.\r\n\r\nThat means that we can't simply rev the major version number more often, as a means to drop old ruby versions. Besides, I think our users appreciate the stability of a major RSpec version line lasting for years.\r\n\r\nGiven that major new RSpec versions have historically only happened every 3-5 years, and our recent productivity is, if anything, less than it's been in the past, I think that coupling Ruby version support to major releases is problematic. We could better serve our users (by more productively addressing their issues, building new features, etc) if we were able to drop support for old versions of Ruby between major versions.\r\n\r\nSo, I believe that beginning with RSpec 4, we should come up with a new Ruby version policy that is _not_ coupled to major releases.\r\n\r\n## What should we do instead?\r\n\r\nI propose that we allow ourselves to drop support for old versions of Ruby as part of a minor release (e.g. `x.y.0`) in addition to major releases. In addition, I think it would be beneficial to have a specific policy about when we will drop old versions, so that it's not arbitrary based on when we feel like it. The Ruby core team announces the support schedule for each version of Ruby, and that includes an EOL date.  I think we should adopt a policy of dropping support for old versions of ruby in the _next_ minor release that comes N months after a version is EOL'd (for some reasonable value of N, such as 6, 12, 18 or 24).\r\n\r\nHere's a concrete example. [Ruby 2.0 was EOL'd on 2016-02-24](https://www.ruby-lang.org/en/news/2016/02/24/support-plan-of-ruby-2-0-0-and-2-1/). If we had adopted this policy for RSpec 3, and chose N=24, we would be dropping support for Ruby 2.0 in RSpec 3.8, which is the next minor release, since 2 years has elapsed since it was EOL'd.\r\n\r\n## How would this effect users?\r\n\r\n* For users who use RSpec to test applications: I do not expect this to have much effect (if any) on these users. This could really only effect users who are running really old versions of Ruby that are months or years past the point where the Ruby core team is supporting it. I doubt there are any users who are allowing their Ruby version to remain so far behind while also staying on the latest version of RSpec.\r\n* For users who use RSpec to test gems: users who support old versions of Ruby that we no longer support will be effected. They won't be able to upgrade RSpec without dropping support for old ruby versions. However, if we pick a large enough value of N, the number of users who are effected by this should be small.\r\n\r\n## Questions\r\n\r\n1. Thoughts on the idea as a whole?\r\n2. If we went with this proposal, what value of N should we pick?\r\n",
    "performed_via_github_app": null
  }
]